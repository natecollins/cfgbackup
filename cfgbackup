#!/bin/bash
################################################################################
# Copyright (c) 2017 Nathan Collins
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################

VERSION=0.3.0

# include files
SCRPTDIR="${BASH_SOURCE%/*}"
. ${SCRPTDIR}/misc.bash
. ${SCRPTDIR}/email.bash
. ${SCRPTDIR}/logging.bash
. ${SCRPTDIR}/rotation.bash
. ${SCRPTDIR}/parseconf.bash
. ${SCRPTDIR}/checkjob.bash
. ${SCRPTDIR}/statusjob.bash
. ${SCRPTDIR}/runjob.bash
. ${SCRPTDIR}/resetjob.bash
. ${SCRPTDIR}/listjob.bash

#######################################
# HELP, GLOBALS, AND PARSE/RUN COMMANDS
#######################################

# Command help
runhelp() {
    echo ""
    echo "Usage: cfgbackup [config-file] [command]"
    echo ""
    echo "    Creates backups of a directory given a config file specifying"
    echo "how the backup should be run. Each backup job uses a separate config"
    echo "file. See provided example.conf file as a template to use for"
    echo "setting up a config file. Scheduling of backups should be handled"
    echo "by cron."
    echo ""
    echo "COMMANDS:"
    echo "  check   - Perform a verification of the config file and check"
    echo "            that access to the source and target directories exist."
    echo "  status  - Print out the current status of any current job for the"
    echo "            given config. If no job is running, reports on the last"
    echo "            job that ran."
    echo "  list    - List rotational backup subdirectories for the given conf."
    echo "  run     - Run the backup according to the config file provided."
    echo "  reset   - Resets partially completed or failed backups. This will"
    echo "            abort a currently running backup."
    echo ""
    echo "cfgbackup v${VERSION}"
    echo ""
}

if [[ -z "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" || $1 == "-V" || $1 == "--version" ]]; then
    runhelp
    exit 0
fi

# Grab command arguments
CONFIG_FILE=$1
COMMAND=$2

###############################
## Declare global variables
globals_init() {
    declare -g CONF_FILE_BASE
    declare -g CONF_NAME
    declare -g PID_FILE
    declare -g RUN_DIR
    declare -g PID_FULL
    CONF_FILE_BASE=$( basename $CONFIG_FILE )
    CONF_NAME=${CONF_FILE_BASE%.*}
    PID_FILE=$( printf '%q' "${CONFIG[PID_FILE]}" )
    # Globals for rotation job
    RUN_DIR=$( epath_join "${CONFIG[TARGET_DIR]}" "${CONFIG[RUNNING_DIRNAME]}" )
    PID_FULL=$( epath_join "${CONFIG[TARGET_DIR]}" "$PID_FILE" )
    # Globals for sync job
    if [[ ${CONFIG[BACKUP_TYPE]} == "sync" ]]; then
        RUN_DIR=$( epath_join "${CONFIG[TARGET_DIR]}" )
        PID_FULL=$( path_join "$RUN_DIR" "$PID_FILE" )
    fi
}

###############################
## Validate the command given and select the appropriate action to perform
select_command() {
    # Validate command
    VALID_COMMANDS=(check status list run reset)
    array_contains VALID_COMMANDS $COMMAND
    if [[ $? != 0 ]]; then
        runhelp
        echo "ERROR: Invalid command given: $COMMAND"
        exit 1
    fi

    # Run commands
    if [[ $COMMAND == "check" ]]; then
        command_check
        echo "Config is OK."
    fi
    if [[ $COMMAND == "run" ]]; then
        command_check
        log_compress
        command_run
    fi
    if [[ $COMMAND == "status" ]]; then
        command_check
        command_status
    fi
    if [[ $COMMAND == "list" ]]; then
        command_list
    fi
    if [[ $COMMAND == "reset" ]]; then
        command_reset
    fi
}

###############################
## cfgbackup starts here
parse_config
precheck_requirements
globals_init
log_init
select_command

