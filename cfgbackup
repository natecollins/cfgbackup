#!/bin/bash
#TODO copyright

VERSION=0.0.1

# include files
. misc.bash
. email.bash
. logging.bash
. rotation.bash
. parseconf.bash
. checkjob.bash
. statusjob.bash
. runjob.bash

# Command help
runhelp() {
    echo ""
    echo "Usage: cfgbackup [config-file] [command]"
    echo ""
    echo "    Creates backups of a directory given a config file specifying"
    echo "how the backup should be run. Each backup job uses a separate config"
    echo "file. See provided example.conf file as a template to use for"
    echo "setting up a config file. Scheduling of backups should be handled"
    echo "by cron."
    echo ""
    echo "COMMANDS:"
    echo "  check   - Perform a verification of the config file and check"
    echo "            that access to the source and target directories exist."
    echo "  status  - Print out the current status of any current job for the"
    echo "            given config. If no job is running, reports on the last"
    echo "            job that ran."
    echo "  list    - List information about backups that have been created"
    echo "            using the given config."
    echo "  run     - Run the backup according to the config file provided."
    echo "  reset   - Resets partially completed or failed backups. This will"
    echo "            abort a currently running backup."
    echo ""
    echo "cfgbackup v${VERSION}"
    echo ""
}

if [[ -z "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" || $1 == "--version" ]]; then
    runhelp
    exit 0
fi

# Parse Config file
CONFIG_FILE=$1
parse_config $CONFIG_FILE
if [[ $? == 1 ]]; then
    echo "ERROR: Could not parse config file: $1"
    for PARSE_MSG in "${PARSE_ERRORS[@]}"; do
        echo $PARSE_MSG
    done
    exit 1
fi

# Verify required tools and versions
#TODO bash4, rsync, etc

# Global variables (default rotation)
RUN_DIR=$( epath_join "${CONFIG[TARGET_DIR]}" "${CONFIG[RUNNING_DIRNAME]}" )
PID_FILE=$( path_join "$RUN_DIR" "cfgbackup.pid" )
# Globals (sync)
if [[ ${CONFIG[BACKUP_TYPE]} == "sync" ]]; then
    RUN_DIR=$( epath_join "${CONFIG[TARGET_DIR]}" )
    PID_FILE=$( path_join "$RUN_DIR" "cfgbackup.pid" )
fi

# Verify command
VALID_COMMANDS=(check status list run reset)
array_contains VALID_COMMANDS $2
if [[ $? != 0 ]]; then
    runhelp
    echo "ERROR: Invalid command given: $2"
    exit 1
fi
COMMAND=$2

# Run commands
if [[ $COMMAND == "check" ]]; then
    command_check
    echo "Config is OK."
fi
if [[ $COMMAND == "run" ]]; then
    command_check
    command_run
fi
if [[ $COMMAND == "status" ]]; then
    command_check
    command_status
fi
if [[ $COMMAND == "list" ]]; then
    echo "TODO command_list"
    #TODO command_list
fi
if [[ $COMMAND == "reset" ]]; then
    echo "TODO command_reset"
    #TODO command_reset
fi


